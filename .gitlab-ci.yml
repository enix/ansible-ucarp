variables:
  GITHUB_REPO: $CI_PROJECT_NAME
  GITHUB_GROUP: enix
  ANSIBLE_INVENTORY: "tests/inventory"
  PYTHONUNBUFFERED: "1"
  ANSIBLE_FORCE_COLOR: "true"

.ansible_test_template: &ansible_test
  script:
    - ansible --version
    # Run linters. Does not fail if no errors reported
    - ansible-lint --force-color . || true
    - yamllint -f colored . || true
    # - ansible-galaxy install -v -r requirements.yml
    # install dependencies
    - ansible-playbook -vvv --connection=local tests/deps.yml
    - ansible-playbook tests/test.yml --syntax-check
    - ansible-playbook -vvv --connection=local tests/test.yml
    - idempotence=$(mktemp)
    - ansible-playbook -vvv --connection=local tests/test.yml | tee ${idempotence}
    - >
      tail ${idempotence}
      | grep -q 'changed=0.*failed=0'
      && (echo 'Idempotence test: pass' && exit 0)
      || (echo 'Idempotence test: fail' && exit 1)
# This part is used to check role run.
# Add your own tests depending on your $ROLE
    - echo "=======> Starting output tests"

# We build using (ansiblecheck)[https://hub.docker.com/r/ansiblecheck/ansiblecheck/]
# images It provide a wide variety of OS container images to test with.
# most frequent ones included here

debian-jessie:
  image: ansiblecheck/ansiblecheck:debian-jessie
  <<: *ansible_test

debian-stretch:
  image: ansiblecheck/ansiblecheck:debian-stretch
  <<: *ansible_test

ubuntu-trusty:
  image: ansiblecheck/ansiblecheck:ubuntu-trusty
  <<: *ansible_test

ubuntu-xenial:
  image: ansiblecheck/ansiblecheck:ubuntu-xenial
  before_script:
    - ln -sf /usr/bin/python3 /usr/bin/python
  <<: *ansible_test

ubuntu-bionic:
  image: ansiblecheck/ansiblecheck:ubuntu-bionic
  before_script:
    - ln -sf /usr/bin/python3 /usr/bin/python
  <<: *ansible_test

importgalaxy:
  stage: deploy
  image: registry.gitlab.com/lcaflc/ansiblecheck:debian-bullseye
  only: 
    - main
    - master
    - tags
#  when: on_success
  before_script:
    - ansible --version
  script:
    - ansible-galaxy role import ${GITHUB_GROUP} ${GITHUB_REPO} --token ${GALAXY_API_TOKEN}
